#!/usr/bin/env php
<?php

declare(strict_types=1);

use Alfresco\Contracts\DependsOnIndexes;
use Alfresco\Manual;
use Alfresco\Manual\Factory;
use Alfresco\Output;
use Alfresco\Process;
use Illuminate\Config\Repository as Configuration;
use Illuminate\Container\Container;
use Illuminate\Support\Benchmark;
use Illuminate\Support\Collection;

use function Safe\file_get_contents;

/*
 * Bootstrapping.
 */

require_once __DIR__.'/../vendor/autoload.php';

error_reporting(E_ALL);

/** @var Container */
$container = require_once __DIR__.'/../bootstrap.php';

/*
 * Resolve CLI input options.
 */

$options = collect($argv)
    ->skip(1)
    ->filter(fn ($value) => str_starts_with($value, '-'))
    ->map(fn ($option) => with(explode('=', $option), fn ($bits) => [
        'name' => $bits[0],
        'value' => $bits[1] ?? true,
    ]));

// Input helpers...

$option = fn ($key): null|string|bool => $options->firstWhere('name', $key)['value'] ?? null;
$options = fn ($key): Collection => $options->where('name', $key)->pluck('value');

/*
 * Adjust config based on CLI input.
 */

$option('--debug') && $container->make(Configuration::class)->set(['debug' => true]);

/*
 * Output help information when requested.
 */

$output = $container->make(Output::class);

if ($option('--help')) {
    $output->write(file_get_contents(__DIR__.'/help.txt'));
    exit;
}

/*
 * Ensure required arguments are provided.
 */

if (! $option('--manual')) {
    $container->make(Output::class)->write('<yellow>The [--manual] argument is required.</yellow>');
    exit(1);
}

/*
 * Here we go.
 */

$output->line('🍃 Alfresco');

/*
 * Resolve generators and their indexes.
 */

[$generators, $indexes] = $options('--generator')
    ->whenEmpty(fn () => collect([Alfresco\Website\Generator::class]))
    ->map(fn ($class) => $container->make($class))
    ->pipe(fn ($generators) => [
        $generators,
        $generators->whereInstanceOf(DependsOnIndexes::class)
            ->flatMap(fn ($generator) => $generator->indexes()),
    ]);

/*
 * Resolve the manual factory and process instances we need to run the generators.
 */

[$factory, $process, $measure] = [
    $container->make(Factory::class),
    $container->make(Process::class),
    fn ($callback) => round(Benchmark::measure($callback) / 1000, 2), // @phpstan-ignore binaryOp.invalid
];

/*
 * Run indexes.
 *
 * The indexes perform an initial loop over the documentation to perform any
 * useful read-ahead actions. This information can then be used by their
 * generators to make decisons based on data it has not yet seen.
 */

if ($option('--no-index')) {
    $output->line('<yellow>Skipping indexing.</yellow>');
} else {
    $output->write('<blue>Indexing</blue>');

    $duration = $measure(fn () => $process->handle($factory->make($option('--manual')), $indexes, function ($node, $i) use ($option, $output) {
        if ($option('--step-debug')) {
            $output->write('<dim>Hit ENTER to process node: </dim>');
            $output->write("<{$node->name}");
            $output->write(' id="'.($node->hasId() ? $node->id() : null).'"');
            $output->write(' depth="'.$node->depth.'"');
            $output->write('>');
            fgets(STDIN);
        } elseif ($i % 5000 === 0) {
            $output->write('.');
        }
    }));

    $output->line("Indexing completed in <green><bold>{$duration}</bold></green> seconds.");
}

/*
 * Run the generators.
 */

if ($option('--no-generation')) {
    $output->line('<yellow>Skipping generation.</yellow>');
} else {
    $output->write('<blue>Generating</blue>');

    $duration = $measure(fn () => $process->handle($factory->make($option('--manual')), $generators, function ($node, $i) use ($option, $output) {
        if ($option('--step-debug')) {
            $output->write('<dim>Hit ENTER to process node: </dim>');
            $output->write("<{$node->name}");
            $output->write(' id="'.($node->hasId() ? $node->id() : null).'"');
            $output->write(' depth="'.$node->depth.'"');
            $output->write('>');
            fgets(STDIN);
        } elseif ($i % 5000 === 0) {
            $output->write('.');
        }
    }));

    $output->line("Generation completed in <green><bold>{$duration}</bold></green> seconds.");
}

$output->line('<green>Done.</green>');
