#!/usr/bin/env php
<?php

use Alfresco\Configuration;
use Alfresco\Container;
use Alfresco\Contracts\DependsOnIndexes;
use Alfresco\Manual;
use Alfresco\ManualFactory;
use Alfresco\Output;
use Alfresco\Process;
use Illuminate\Support\Collection;

use function Alfresco\measure;
use function Safe\file_get_contents;

/*
 * Bootstrapping.
 */

require_once __DIR__.'/../vendor/autoload.php';

error_reporting(E_ALL);

/** @var Container */
$container = require_once __DIR__.'/../bootstrap.php';

/*
 * Resolve CLI input options.
 */

$options = collect($argv)
    ->skip(1)
    ->filter(fn ($value) => str_starts_with($value, '-'))
    ->map(fn ($option) => with(explode('=', $option), fn ($bits) => [
        'name' => $bits[0],
        'value' => $bits[1] ?? true,
    ]));

$option = fn ($key): ?string => $options->firstWhere('name', $key)['value'] ?? null;
$options = fn ($key): Collection => $options->where('name', $key)->pluck('value');

/*
 * Output help information when requested.
 */

$output = $container->make(Output::class);

if ($option('--help')) {
    $output->write(file_get_contents(__DIR__.'/help.txt'));
    exit;
}

/*
 * Ensure required arguments are provided.
 */

if (! $option('--manual')) {
    $container->make(Output::class)->write('<yellow>The [--manual] argument is required.</yellow>');
    exit(1);
}

/*
 * Adjust config based on CLI input.
 */

$config = $container->make(Configuration::class);

$option('--debug') && $config->merge(['debug' => true]);

/*
 * Here we go.
 */

$output->line('🍃 <🌈>Alfresco</🌈>');

/*
 * Resolve generators and their indexes.
 *
 * Next, we resolve the configured generators. Generators may specify the
 * indexes they are dependent on. We also resolve the indexes, as we need to
 * process them first.
 */

[$generators, $indexes] = $options('--generator')
    ->whenEmpty(fn () => collect([\Alfresco\Website\Generator::class]))
    ->map(fn ($class) => $container->make($class))
    ->pipe(fn ($generators) => [
        $generators,
        $generators->whereInstanceOf(DependsOnIndexes::class)
            ->flatMap(fn ($generator) => $generator->indexes())
            ->unique()
            ->map(fn ($class) => $container->make($class)),
    ]);

/*
 * Resolve the manual and process.
 *
 * The manual represents the documentation file and allows us to easily iterate
 * over the XML contents. The process is a function that iterates over the manual
 * with the given generators / indexes to produce the desired output.
 */

$manual = $container->make(ManualFactory::class)->make($option('--manual'));
$process = $container->make(Process::class);

/*
 * Run indexes.
 *
 * The indexes perform an initial loop over the documentation to perform any
 * useful read-ahead actions. When reading large XML files we are unable to
 * "look ahead".  Doing an initial iteration allows us to collect useful
 * information for generators which allows them to, kind, "look ahead".
 */

if ($option('no-index')) {
    $output->line('<yellow>Skipping indexing.</yellow>');
} else {
    $output->line('<blue>Indexing.</blue>');

    $duration = measure(fn () => $process($manual, $indexes, function ($node, int $i) use ($option, $output) {
        if ($option('--debug')) {
            $output->write('<dim>Hit ENTER to process node: </dim>');
            $output->write("<{$node->name}");
            $id = $node->hasId() ? $node->id() : null;
            $output->write(' id="'.($id).'"');
            $output->write(' depth="'.$node->depth.'"');
            $output->write('>');
            fgets(STDIN);
        } elseif ($i % 5000 === 0) {
            $output->write('<🌈>.</🌈>');
        }
    }));

    $output->line("Indexing completed in <green><bold>{$duration}</bold></green> seconds.");
}

/*
 * Resolve another instance of the manul.
 *
 * As the manual iterates over XML, it internally handles a "cursor". After
 * running the indexes the cursor has reached the end of the document. Instead
 * of "rewinding" the cursor, we will just resolve a new manual instance.
 */

$manual = $container->make(Manual::class);

/*
 * Run generators.
 *
 * This is where the magic happens 💫. We will now process the generators to
 * create the desired builds.
 */

if ($option('--no-generation')) {
    $output->line('<yellow>Skipping generation.</yellow>');
} else {
    $output->line('<blue>Generating.</blue>');

    $duration = measure(fn () => $process($manual, $generators, function ($node, int $i) use ($option, $output) {
        if ($option('--debug')) {
            $output->write("<{$node->name}");
            // $output(' id="'.$node->hasId() ? $node->id() : ''.'"');
            $output->write(' depth="'.$node->depth.'"');
            $output->write('>');
            $output->line('Hit ENTER to continue.');

            fgets(STDIN);
        } elseif ($i % 5000 === 0) {
            $output->write('<🌈>.</🌈>');
        }
    }));

    $output->line("Generation completed in <green><bold>{$duration}</bold></green> seconds.");
}

$output->line('<green>Finished.</green>');
